<project name="DUGforce" default="usage" basedir="." xmlns:sf="antlib:com.salesforce" xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:ml="org.missinglink.ant.task.http.HttpClientTask">

  <!-- Download from https://code.google.com/p/missing-link/ -->
  <taskdef name="http" uri="org.missinglink.ant.task.http.HttpClientTask" classname="org.missinglink.ant.task.http.HttpClientTask" classpath="lib/ml-ant-http-1.1.3/ml-ant-http-1.1.3.jar" />
  
  <!-- sf.username and sf.password should be set in build.properties -->
  <!-- This file is not included in the repo, create it if it does not exist -->

  <!-- 
    Sample build.properties:
    
    sf.username=joe.schmoe@foobar.baz
    sf.password=SuzieQ123securitytokenabcdef
    
  -->

  <property file="build.properties" />
  <property file="local.build.properties" />
  <property environment="env" />

  <!--
   ! Commenting this out because it chokes "BUILD FAILED"
   ! build.xml:21: taskdef class org.apache.ivy.ant.IvyRetrieve cannot be found
   ! using the classloader AntClassLoader[]
   !-->
  <!--<taskdef name="ivy-retrieve" classname="org.apache.ivy.ant.IvyRetrieve"/>-->
  
  <target name="usage">
    <exec executable="ant">
      <arg value="-p" />
    </exec>
  </target>

  <target name="deployWithUnitTests" depends="buildResources" description="Deploys code to org and runs all Apex unit tests">
    <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="src" rollbackOnError="true" runAllTests="true" />
  </target>

  <target name="deploy" depends="buildResources" description="Deploys code to org">
    <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="src" rollbackOnError="true" />
  </target>

  <!-- Shows check only; never actually saves to the server -->
  <target name="deployCodeCheckOnly" depends="buildResources" description="Check to see if deploy would succeed">
    <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="src" checkOnly="true"/>
  </target>

  <target name="buildResources" description="Compresses all dirs in resources/ folder saving to src/staticResources">
    <echo>$${user.dir}=${user.dir}</echo>
    <echo>$${basedir}=${basedir}</echo>
    <echo>dirset dir=resources/</echo>
    <subant genericantfile="build.xml" target="buildArchive">
      <dirset dir="resources/" includes="*" />
    </subant>
  </target>
  
  <target name="buildArchive">
    <!--
    <echo>$${user.dir}=${user.dir}</echo>
    <echo>$${basedir}=${basedir}</echo>
    <echo level="warning">Overwriting: ${basedir}.resource</echo>
    -->
    <delete file="${basedir}.resource" failonerror="false" />
    <zip destfile="${basedir}.resource">
      <fileset dir="${basedir}" includes="**" />
    </zip>
    <copy file="${basedir}.resource" todir="${user.dir}/src/staticresources" />
    <!--
    <echo>file="${basedir}.resource"</echo>
    <echo>todir="${user.dir}/src/staticresources"</echo>
    -->
  </target>

  <target name="resolve" description="Resolve dependencies via ivy">
    <ivy:retrieve />
  </target>
  
  <target name="runSystemTests" description="Runs system tests">
    <executeAnonymous username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}">
      <![CDATA[
        Integer numTestAccounts = [SELECT COUNT() FROM Account WHERE Name = 'System Test Account'];
        System.assertEquals(0, numTestAccounts);

        Account systemTestAcct = new Account();
        systemTestAcct.Name = 'System Test Account';
        insert systemTestAcct;

        testAccounts = [SELECT Id FROM Account WHERE Name = 'System Test Account'];
        numTestAccounts = testAccounts.size();
        System.assertEquals(1, numTestAccounts);

        delete testAccounts;
      ]]>
    </executeAnonymous>
  </target>
  
  <!--
   ! BigAss Ant Tooling API macro for easy Execute Anonymous
   ! https://gist.github.com/bigassforce/af56ebda0354b273ab76
   !-->
  <macrodef name="executeAnonymous" description="Invoke ExecuteAnonymous using Salesforce Tooling API">
    <attribute name="username" description="Salesforce user name."/>
    <attribute name="password" description="Salesforce password."/>
    <attribute name="serverurl" description="Salesforce endpoint."/>
    <text name="apexcode"/>
    <sequential>
      <!-- Login to populate serverUrl / sessionId / instance -->
      <login username="@{username}" password="@{password}" serverurl="@{serverurl}" />
      
      <!-- Execute using HTTP GET -->
      <ml:http url="${instance}/services/data/v33.0/tooling/executeAnonymous" method="GET" outfile="lib/executeAnonymousResult.json"  statusProperty="loginResponseStatus">
        <headers>
          <header name="Authorization" value="Bearer ${sessionId}"/>
        </headers>
        <query>
          <parameter name="anonymousBody" value="@{apexcode}"/>
        </query>
      </ml:http>
      
      <!-- Fail on error -->
      <loadfile property="executeAnonymousResult" srcFile="lib/executeAnonymousResult.json" />
      <fail message="Execute Anonymous failed: ${executeAnonymousResult}">
        <condition>
          <resourcecontains resource="lib/executeAnonymousResult.json" substring="&quot;success&quot;:false" />
        </condition>
      </fail>
      
      <!-- Show output -->
      <echo message="${executeAnonymousResult}" />
    </sequential>
  </macrodef>
  
  <macrodef name="login" description="Login to salesforce and populate serverUrl / sessionId / instance">
    <attribute name="username" description="Salesforce user name."/>
    <attribute name="password" description="Salesforce password."/>  
    <attribute name="serverurl" description="Salesforce endpoint."/>  
    <sequential>
      <!-- Obtain Session Id via Login SOAP service -->
      <ml:http url="@{serverurl}/services/Soap/c/33.0" method="POST" failonunexpected="false" outfile="lib/loginResult.xml" statusProperty="loginResponseStatus">
        <headers>
          <header name="Content-Type" value="text/xml"/>
          <header name="SOAPAction" value="login"/>
        </headers>
        <entity><![CDATA[
          <env:Envelope xmlns:xsd='http://www.w3.org/2001/XMLSchema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:env='http://schemas.xmlsoap.org/soap/envelope/'>
            <env:Body>
              <sf:login xmlns:sf='urn:enterprise.soap.sforce.com'>
                <sf:username>@{username}</sf:username>
                <sf:password>@{password}</sf:password>
              </sf:login>
            </env:Body>
          </env:Envelope>]]>
        </entity>
      </ml:http>
      
      <!-- Fail on error -->
      <loadfile property="loginResult" srcFile="lib/loginResult.xml" />
      <fail message="Login failed: ${loginResult}">
        <condition>
          <resourcecontains resource="lib/loginResult.xml" substring="faultcode" />
        </condition>
      </fail>
      
      <!-- Parse response into properties -->
      <xmlproperty file="lib/loginResult.xml" />
      <echo file="lib/serverUrl.txt" message="${soapenv:Envelope.soapenv:Body.loginResponse.result.serverUrl}" />
      <echo file="lib/sessionId.txt" message="${soapenv:Envelope.soapenv:Body.loginResponse.result.sessionId}" />
      <echo file="lib/instance.txt" message="${soapenv:Envelope.soapenv:Body.loginResponse.result.serverUrl}" />
      <replaceregexp file="lib/instance.txt" match="(https://[^/]+)/.*" replace="\1" />
      <loadfile property="sessionId" srcFile="lib/sessionId.txt" />
      <loadfile property="instance" srcFile="lib/instance.txt" />
    </sequential>
  </macrodef>

</project>
